! Copyright 2015 Andrew Dawson, Peter Dueben
!
! Licensed under the Apache License, Version 2.0 (the "License");
! you may not use this file except in compliance with the License.
! You may obtain a copy of the License at
!
!     http://www.apache.org/licenses/LICENSE-2.0
!
! Unless required by applicable law or agreed to in writing, software
! distributed under the License is distributed on an "AS IS" BASIS,
! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
! See the License for the specific language governing permissions and
! limitations under the License.

MODULE test_apply_truncation
! Tests for the apply_truncation subroutine
!
    USE pfunit_mod
    USE suite_common, ONLY : utest64, utest64_t, &
                             utest64_ieee, utest64_ieee_t, &
                             min_significand_bits
    USE rp_emulator
    IMPLICIT NONE

    @TESTCASE
    TYPE, EXTENDS(TestCase) :: EmulatorTest
        LOGICAL :: rpe_active
        INTEGER :: rpe_default_sbits
        LOGICAL :: rpe_ieee_half
        LOGICAL :: rpe_fast_mode
    CONTAINS
        procedure :: setUp
        procedure :: tearDown
    END TYPE EmulatorTest

CONTAINS

    SUBROUTINE setUp (this)
        CLASS(EmulatorTest), INTENT(INOUT) :: this
        this%rpe_active = RPE_ACTIVE
        this%rpe_default_sbits = RPE_DEFAULT_SBITS
        this%rpe_ieee_half = RPE_IEEE_HALF
        this%rpe_fast_mode = RPE_FAST_MODE
    END SUBROUTINE setUp

    SUBROUTINE tearDown (this)
        CLASS(EmulatorTest), INTENT(INOUT) :: this
        RPE_ACTIVE = this%rpe_active
        RPE_DEFAULT_SBITS = this%rpe_default_sbits
        RPE_IEEE_HALF = this%rpe_ieee_half
        RPE_FAST_MODE = this%rpe_fast_mode
    END SUBROUTINE tearDown

    @TEST
    SUBROUTINE test_apply_truncation_invalid_sbits_high (context)
    ! Test that nothing different happens to values when the number
    ! of significand bits is greater than 52.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced

        reduced%sbits = 99
        reduced = utest64
        @ASSERTEQUAL(reduced%val, utest64)

        reduced%sbits = 53
        reduced = utest64
        @ASSERTEQUAL(reduced%val, utest64)
    END SUBROUTINE test_apply_truncation_invalid_sbits_high

    @TEST
    SUBROUTINE test_apply_truncation_invalid_sbits_low (context)
    ! Test that nothing different happens to values when the number
    ! of significand bits is greater less than 0.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced

        reduced%sbits = -99
        reduced = utest64
        @ASSERTEQUAL(reduced%val, utest64)
    END SUBROUTINE test_apply_truncation_invalid_sbits_low

    @TEST
    SUBROUTINE test_apply_truncation_ieee_half_null (context)
    ! Test that nothing different happens to values that are in-range
    ! for IEEE half-precision.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced1, reduced2
        REAL(KIND=RPE_REAL_KIND) :: reference

        RPE_DEFAULT_SBITS = 10

        RPE_IEEE_HALF = .TRUE.
        reduced1 = utest64

        RPE_IEEE_HALF = .FALSE.
        reduced2 = utest64

        @ASSERTEQUAL(reduced1%val, reduced2%val)
    END SUBROUTINE test_apply_truncation_ieee_half_null

    @TEST
    SUBROUTINE test_apply_truncation_ieee_half_overflow (context)
    ! Test that values overflowing IEEE half-precision produce infinity.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced

        RPE_DEFAULT_SBITS = 10
        RPE_IEEE_HALF = .TRUE.

        reduced = 32800
        @ASSERTTRUE(reduced > HUGE(1.0_RPE_REAL_KIND))

        reduced = -32800
        @ASSERTTRUE(reduced < -HUGE(1.0_RPE_REAL_KIND))
    END SUBROUTINE test_apply_truncation_ieee_half_overflow

    @TEST
    SUBROUTINE test_apply_truncation_ieee_half_subnormal (context)
    ! Test that subnormal IEEE half-precision values are rounded.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced

        REAL(KIND=RPE_REAL_KIND) :: limit, delta

        RPE_DEFAULT_SBITS = 10
        RPE_IEEE_HALF = .TRUE.

        limit = 2.0_RPE_REAL_KIND ** (-14)
        delta = 2.0_RPE_REAL_KIND ** (-24)

        ! Check that positive values are rounded correctly and ensure the
        ! result of the rounding has no more than 10 bits in the significand.
        reduced = limit - delta - (2.0_RPE_REAL_KIND ** (-25))
        @ASSERTEQUAL(limit - 2 * delta, reduced%val)
        @ASSERTLESSTHANOREQUAL(min_significand_bits(reduced%val), 10)

        ! Repeat for negative values.
        reduced = -limit + delta + (2.0_RPE_REAL_KIND ** (-25))
        @ASSERTEQUAL(-limit + 2 * delta, reduced%val)
        @ASSERTLESSTHANOREQUAL(min_significand_bits(reduced%val), 10)
    END SUBROUTINE test_apply_truncation_ieee_half_subnormal

    @TEST
    SUBROUTINE test_apply_truncation_fast_mode (context)
    ! Test fast mode for truncation.
    !
        CLASS(EmulatorTest), INTENT(INOUT) :: context
        TYPE(rpe_var) :: reduced
        INTEGER :: nbits

        RPE_FAST_MODE = .TRUE.

        DO nbits = 1, 52
            reduced%sbits = nbits
            reduced = utest64_ieee
            @ASSERTEQUAL(reduced%val, utest64_ieee_t(nbits))
        END DO
    END SUBROUTINE test_apply_truncation_fast_mode

END MODULE test_apply_truncation
